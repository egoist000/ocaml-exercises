type token =
  | ATOM of (string)
  | TRUE
  | FALSE
  | NOT
  | AND
  | OR
  | IMP
  | IFF
  | RPAREN
  | LPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Language
# 19 "parser.ml"
let yytransl_const = [|
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* NOT *);
  261 (* AND *);
  262 (* OR *);
  263 (* IMP *);
  264 (* IFF *);
  265 (* RPAREN *);
  266 (* LPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* ATOM *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\002\000\003\000\003\000\003\000\003\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\002\000\003\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\009\000\008\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\008\000"

let yysindex = "\255\255\
\006\255\000\000\000\000\000\000\000\000\006\255\006\255\022\255\
\000\000\017\255\006\255\006\255\006\255\006\255\000\000\000\000\
\000\255\253\254\026\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\004\000\006\000"

let yygindex = "\000\000\
\007\000"

let yytablesize = 271
let yytable = "\001\000\
\007\000\011\000\012\000\006\000\011\000\005\000\003\000\004\000\
\005\000\006\000\010\000\000\000\009\000\010\000\000\000\007\000\
\000\000\016\000\017\000\018\000\019\000\011\000\012\000\013\000\
\014\000\015\000\011\000\012\000\013\000\014\000\011\000\012\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\007\000\
\007\000\007\000\006\000\006\000\006\000\005\000\005\000"

let yycheck = "\001\000\
\000\000\005\001\006\001\000\000\005\001\000\000\001\001\002\001\
\003\001\004\001\000\000\255\255\006\000\007\000\255\255\010\001\
\255\255\011\000\012\000\013\000\014\000\005\001\006\001\007\001\
\008\001\009\001\005\001\006\001\007\001\008\001\005\001\006\001\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\007\001\008\001\009\001\008\001\009\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  NOT\000\
  AND\000\
  OR\000\
  IMP\000\
  IFF\000\
  RPAREN\000\
  LPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  ATOM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 16 "parser.mly"
                               ( Prop(_1) )
# 163 "parser.ml"
               : Language.form))
; (fun __caml_parser_env ->
    Obj.repr(
# 17 "parser.mly"
                               ( True )
# 169 "parser.ml"
               : Language.form))
; (fun __caml_parser_env ->
    Obj.repr(
# 18 "parser.mly"
                               ( False )
# 175 "parser.ml"
               : Language.form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Language.form) in
    Obj.repr(
# 19 "parser.mly"
                               ( Not _2)
# 182 "parser.ml"
               : Language.form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Language.form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Language.form) in
    Obj.repr(
# 20 "parser.mly"
                               ( And(Imp(_1,_3),Imp(_3,_1)) )
# 190 "parser.ml"
               : Language.form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Language.form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Language.form) in
    Obj.repr(
# 21 "parser.mly"
                               ( Imp(_1,_3) )
# 198 "parser.ml"
               : Language.form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Language.form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Language.form) in
    Obj.repr(
# 22 "parser.mly"
                               ( Or(_1,_3) )
# 206 "parser.ml"
               : Language.form))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Language.form) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Language.form) in
    Obj.repr(
# 23 "parser.mly"
                               ( And(_1,_3) )
# 214 "parser.ml"
               : Language.form))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Language.form) in
    Obj.repr(
# 24 "parser.mly"
                               ( _2 )
# 221 "parser.ml"
               : Language.form))
(* Entry formula *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let formula (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Language.form)
